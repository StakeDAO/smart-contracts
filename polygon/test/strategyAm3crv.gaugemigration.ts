import { ethers, network } from "hardhat";
import { expect } from "chai";
import { BigNumber } from "@ethersproject/bignumber";
import { Contract } from "@ethersproject/contracts";
import { parseEther } from "@ethersproject/units";
import { JsonRpcSigner } from "@ethersproject/providers";

import Controller from "../abis/Controller.json";
import YVault from "../abis/YVault.json";
import ERC20 from "../abis/ERC20.json";
import ICurveGauge from "../abis/ICurveGauge.json";

const VAULT = "0x7d60F21072b585351dFd5E8b17109458D97ec120";
const CONTROLLER = "0x91aE00aaC6eE0D7853C8F92710B641F68Cd945Df";
const GOVERNANCE = "0xb36a0671B3D49587236d7833B01E79798175875f";
const OLD_STRATEGY = "0xe7E66372f19C3E5Fc4D6c3c88c54178Bcd525040";
const OLD_GAUGE = "0x19793B454D3AfC7b454F206Ffe95aDE26cA6912c";
const CRV = "0x172370d5Cd63279eFa6d502DAB29171933a610AF";
const WANT = "0xE7a24EF0C5e95Ffb0f6684b813A78F2a3AD7D171"; // am3CRV
const NEWGAUGE = "0x20759F567BB3EcDB55c817c9a1d13076aB215EdC";
describe("StrategyAm3Crv Gauge Migration", function () {
	let vault: Contract;
	let want: Contract;
	let crv: Contract;
	let controller: Contract;
	let currentStrategy: Contract;
	let crvGauge: Contract;
	let governanceSigner: JsonRpcSigner;

	let initialBalance: BigNumber;

	before(async function () {
		const [owner] = await ethers.getSigners();

		await network.provider.request({
			method: "hardhat_impersonateAccount",
			params: [CONTROLLER],
		});

		await network.provider.request({
			method: "hardhat_impersonateAccount",
			params: [GOVERNANCE],
		});

		vault = await ethers.getContractAt(YVault, VAULT);
		controller = await ethers.getContractAt(Controller, CONTROLLER);
		want = await ethers.getContractAt(ERC20, WANT);
		crv = await ethers.getContractAt(ERC20, CRV);
		crvGauge = await ethers.getContractAt(ICurveGauge, OLD_GAUGE);
		currentStrategy = await ethers.getContractAt(
			"StrategyAm3Crv",
			OLD_STRATEGY
		);

		governanceSigner = await ethers.provider.getSigner(GOVERNANCE);

		initialBalance = await vault.balance();
	});

	it("Migrate Gauge", async function () {
		this.timeout(0)
		await currentStrategy
			.connect(governanceSigner)
			.harvest(
				"0x",
				"0xec1d21dd0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000172370d5cd63279efa6d502dab29171933a610af00000000000000000000000000000000000000000000001f6cf635fae0b5b85700000000000000000000000000000000000000000000003d97f8b0e3862aa91600000000000000000000000000000000000000000000003e373e6f71756bbce6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000087374616b6564616fceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000002235a16eecf679b51e6de3f847cec2312564ff070000000000000000000000001de7a822a3c3dc50ee63cc06babde277a876909e000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000172370d5cd63279efa6d502dab29171933a610af0000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000007ac899160b8f8c378b1528ab822c0ef7dbf037e20000000000000000000000000823573779edcac7486af5ddbfb91358df47dc3200000000000000000000000000000000000000000000000000000000000022b900000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063000000000000000000000000ce1529fe0058e6b6fd98d907025a49deb0e472bf0000000000000000000000003fcd5de6a9fc8a99995c406c77dda3ed7e406f81000000000000000000000000000000000000000000000000000000000000045700000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000004b00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a0630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000cb42e90de1439cc81e52a8c5028bc4679242933b000000000000000000000000b612d8b6b64d94a21c39ffd90a14f92e555d9151000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000172370d5cd63279efa6d502dab29171933a610af0000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf12700000000000000000000000008f3cf7ad23cd3cadbd9735aff958023239c6a063"
			);
		await controller.connect(governanceSigner).withdrawAll(WANT);
		let availableBalance = await vault.available();

		await currentStrategy.connect(governanceSigner).setGauge(NEWGAUGE);
		await vault.earn();

		expect(availableBalance).to.be.eq(
			await currentStrategy.callStatic.balanceOfPool()
		);

		// Testing old gauge award remains
		expect(
			await crvGauge.claimable_reward(
				currentStrategy.address,
				"0x172370d5Cd63279eFa6d502DAB29171933a610AF"
			)
		).to.eq(0);
		expect(
			await crvGauge.claimable_reward(
				currentStrategy.address,
				"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270"
			)
		).to.eq(0);
	});
});
